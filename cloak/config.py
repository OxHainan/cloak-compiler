import json
import math
import os
from contextlib import contextmanager
from typing import Dict, Any, ContextManager, List

from semantic_version import NpmSpec

from cloak.config_user import UserConfig
from cloak.config_version import Versions


def zk_print(*args, verbosity_level=1, **kwargs):
    if (verbosity_level <= cfg.verbosity) and not cfg.is_unit_test:
        print(*args, **kwargs)


def zk_print_banner(title: str):
    l = len(title) + 4
    zk_print(f'{"#"*l}\n# {title} #\n{"#"*l}\n')


class Config(UserConfig):
    def __init__(self):
        super().__init__()

        # Internal values

        self._is_unit_test = False
        self._concrete_solc_version = None

    def _load_cfg_file_if_exists(self, filename):
        if os.path.exists(filename):
            with open(filename) as conf:
                try:
                    self.override_defaults(json.load(conf))
                except ValueError as e:
                    raise ValueError(f'{e} (in file "{filename}")')

    def load_configuration_from_disk(self, local_cfg_file: str):
        # Load global configuration file
        global_config_dir = self._appdirs.site_config_dir
        global_cfg_file = os.path.join(global_config_dir, 'config.json')
        self._load_cfg_file_if_exists(global_cfg_file)

        # Load user configuration file
        user_config_dir = self._appdirs.user_config_dir
        user_cfg_file = os.path.join(user_config_dir, 'config.json')
        self._load_cfg_file_if_exists(user_cfg_file)

        # Load local configuration file
        self._load_cfg_file_if_exists(local_cfg_file)

    def override_defaults(self, overrides: Dict[str, Any]):
        for arg, val in overrides.items():
            if not hasattr(self, arg):
                raise ValueError(f'Tried to override non-existing config value {arg}')
            try:
                setattr(self, arg, val)
            except ValueError as e:
                raise ValueError(f'{e} (for entry "{arg}")')

    @property
    def cloak_version(self) -> str:
        """cloak version number"""
        return Versions.CLOAK_VERSION

    @property
    def cloak_solc_version_compatibility(self) -> NpmSpec:
        """Target solidity language level for the current zkay version"""
        return Versions.CLOAK_SOLC_VERSION_COMPATIBILITY

    @property
    def solc_version(self) -> str:
        version = Versions.SOLC_VERSION
        assert version is not None and version != 'latest'
        return version

    @staticmethod
    def override_solc(new_version):
        Versions.set_solc_version(new_version)

    @property
    def zk_reserved_name_prefix(self) -> str:
        """
        Identifiers in user code must not start with this prefix.

        This is to ensure that user code does not interfere with the additional code generated by the zkay compiler.
        """
        return 'zk'

    @property
    def tee_reserved_name_prefix(self) -> str:
        """
        Identifiers in user code must not start with this prefix.

        This is to ensure that user code does not interfere with the additional code generated by the zkay compiler.
        """
        return 'tee'

    @property
    def reserved_conflict_resolution_suffix(self) -> str:
        """
        Identifiers in user code must not end with this suffix.

        This is used for resolving conflicts with python globals in the generated offchain simulation code.
        """
        return '_zalt'

    @staticmethod
    def get_contract_var_name(type_name: str) -> str:
        """
        Return an identifier referring to the address variable of verification contract of type 'type_name'

        :param type_name: name of the unqualified verification contract type
        :return: new identifier
        """
        return f'{type_name}_inst'

    @property
    def service_contract_name(self) -> str:
        return f'CloakService'

    @property
    def return_zk_var_name(self) -> str:
        return f'{self.zk_reserved_name_prefix}Ret'

    @property
    def zk_field_prime_var_name(self) -> str:
        return f'{self.zk_reserved_name_prefix}FieldPrime'

    @property
    def zk_struct_prefix(self) -> str:
        return f'{self.zk_reserved_name_prefix}Data'

    @property
    def zk_data_var_name(self) -> str:
        return f'{self.zk_struct_prefix}'

    @property
    def tee_code_hash_name(self) -> str:
        return f'{self.tee_reserved_name_prefix}CHash'

    @property
    def tee_policy_hash_name(self) -> str:
        return f'{self.tee_reserved_name_prefix}PHash'

    @property
    def return_tee_var_name(self) -> str:
        return f'{self.tee_reserved_name_prefix}Ret'

    @property
    def tee_get_addr_function_name(self) -> str:
        return "getTEEAddress"


    @property
    def is_unit_test(self) -> bool:
        return self._is_unit_test

cfg = Config()
Versions.set_solc_version('latest')
